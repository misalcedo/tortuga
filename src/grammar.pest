Program    = { SOI ~ (Expression{2, } | Comparison) ~ EOI }
Comparison = { Expression ~ ( INEQUALITY ~ Expression )* }
Expression = { Match }

Match       = { ( Pattern ~ "=" )? ~ Block }
Pattern     = { Name ~ ( Numerical | Parameters )? | Destructure }
Name        = { "_" | IDENTIFIER }
Numerical   = { "." ~ ( "0" | Name ) }
Destructure = { "{" ~ Parameter ~ ( "," ~ Parameter )* ~ ( "|" ~ Name )? ~ "}" }
Parameters  = { "(" ~ Parameter ~ ( "," ~ Parameter )* ~ ")" }
Parameter   = { Name ~ ( Numerical | Refinement | Parameters )? | Destructure }
Refinement  = { ( INEQUALITY | "=" ) ~ Arithmetic }

Block      = { "[" ~ Expression+ ~ "]" | Arithmetic }
Arithmetic = { Epsilon }
Epsilon    = { Modulo ~ ( EPSILON ~ Modulo )? }
Modulo     = { Sum ~ ( MODULO ~ Sum )* }
Sum        = { Product ~ ( SUM ~ Product )* }
Product    = { Power ~ ( PRODUCT ~ Power )* }
Power      = { Call ~ ( POWER ~ Call )* }


Call       = { Terminal ~ Arguments* }
Arguments  = { "(" ~ Expression ~ ( "," ~ Expression )* ~ ")" }

Terminal   = _{ Number | IDENTIFIER | Tuple | Range | Grouping }
Tuple      = { "{" ~ ( Terminal ~ ( "," ~ Terminal )* )? ~ "}" }
Grouping   = { "(" ~ Expression ~ ")" }
Number     = { "-"? ~ NUMBER }
Range      = { ( "(" | "[" ) ~ Arithmetic ~ "," ~ Arithmetic ~ ( ")" | "]" ) }
IDENTIFIER = @{ XID_START ~ XID_CONTINUE* }
NUMBER     = @{ RADIX? ~ REAL }

RADIX      = _{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT? ~ "#" }
REAL       = _{ ".0" | WHOLE ~ ( "." ~ FRACTIONAL )? }
WHOLE      = _{ "0" | ( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) }
FRACTIONAL = _{ ( ASCII_NONZERO_DIGIT | NONTRAILING_ZERO )+ | "0"? }
NONTRAILING_ZERO = _{ "0" ~ &ASCII_NONZERO_DIGIT }

EPSILON    = { "~" }
MODULO     = { "%" }
SUM        = { "+" | "-" }
PRODUCT    = { "*" | "/" }
POWER      = { "^" }
INEQUALITY = { "<>" | "<=" | ">=" | "<" | ">" }
EQUALITY   = { "=" }

WHITESPACE = _{ PATTERN_WHITE_SPACE }
COMMENT    = _{ ";" ~ (!NEWLINE ~ ANY)* }