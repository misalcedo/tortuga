Program    = { SOI ~ Expression* ~ EOI }

Expression = { Inequality }
Inequality = _{ Equality ~ ( INEQUALITY ~ Equality )* }
Equality   = _{ Arithmetic ~ ( EQUALITY ~ Block )? }
Block      = { Equality | ( "[" ~ Equality ~ Equality+ ~ "]" ) }

Arithmetic = { Modulo }
Modulo     = _{ Sum ~ ( MODULO ~ Sum )* }
Sum        = _{ Product ~ ( SUM ~ Product )* }
Product    = _{ Power ~ ( PRODUCT ~ Power )* }
Power      = _{ Primary ~ ( POWER ~ Primary )* }

Primary    = _{ Number | Call | Grouping }
Number     = @{ RADIX | (SUM? ~ DECIMAL) }
Call       = { IDENTIFIER ~ ( "(" ~ Arguments ~ ")" )? }
Grouping   = { "(" ~ Expression ~ ")" }

Arguments  = { Expression ~ ( "," ~ Expression )* }
Parameters = { Pattern ~ ( "," ~ Pattern )* }

Pattern    = { Range | Function }
Function   = { IDENTIFIER ~ ( "(" ~ Parameters ~ ")" )? }
Range      = { ( Expression ~ INEQUALITY )? ~ IDENTIFIER ~ ( INEQUALITY ~ Expression )? }

IDENTIFIER = { ( ANONYMOUS ~ !( LETTER | NUMBER ) ) | ( !(NUMBER | ANONYMOUS) ~ CHARACTER+ ~ !ANONYMOUS ) }
CHARACTER  = _{ ANONYMOUS | LETTER | NUMBER }
ANONYMOUS  = _{ "_" }

RADIX      = @{ ( "i" | ASCII_DIGIT+ ) ~ "#" ~ SUM? ~ BASE36 }
DECIMAL    = @{ (ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT* )? | ( "." ~ ASCII_DIGIT+ ) ) ~ !IDENTIFIER }
BASE36     = _{ ASCII_ALPHANUMERIC+ ~ ( "." ~ ASCII_ALPHANUMERIC* )? | ( "." ~ ASCII_ALPHANUMERIC+ ) }

MODULO     = { "%" }
SUM        = { "+" | "-" }
PRODUCT    = { "*" | "/" }
POWER      = { "^" }
INEQUALITY = { "<>" | "<=" | ">=" | "<" | ">" }
EQUALITY   = { "=" }

WHITESPACE = _{ SPACE_SEPARATOR | NEWLINE }
COMMENT    = _{ ";" ~ (!NEWLINE ~ ANY)* }