Program       = { SOI ~ ( Continuation | Expression* ) ~ EOI }

// Useful for a REPL (Read-Evaluate-Print Loop).
Continuation  = { Expression ~ ( COMPARATOR ~ Expression )+ }
Expression    = { PatternMatch | Arithmetic }
PatternMatch  = { Pattern ~ MATCH ~ Block }
Block         = { Arithmetic | "[" ~ Expression+ ~ "]" }

Pattern       = { Anonymous | Function | NumberPattern | ListPattern | TuplePattern }
Anonymous     = { ANONYMOUS }
Function      = { Identifier ~ Parameters }
Parameters    = { "(" ~ Parameter ~ ( "," ~ Parameter )* ~ ")" }
Parameter     = { Refinement | Pattern }

Refinement    = { NumberPattern ~ COMPARATOR ~ Arithmetic }
NumberPattern = ${ Identifier ~ Fraction? }
Fraction      = ${  "." ~ ("0" | Anonymous | Identifier) }

TuplePattern  = { "{" ~ FieldsPattern? ~ "}" }
FieldsPattern = { Pattern ~ ( "," ~ Pattern )* }
ListPattern   = { "{" ~ FieldsPattern ~ "|" ~ ( Identifier | Anonymous ) ~ "}" }

Arithmetic    = { Epsilon }
Epsilon       = { Modulo ~ ( EPSILON ~ Modulo )? }
Modulo        = { Sum ~ ( MODULO ~ Sum )* }
Sum           = { Product ~ ( SUM ~ Product )* }
Product       = { Power ~ ( PRODUCT ~ Power )* }
Power         = { Call ~ ( POWER ~ Call )* }

Call          = { Terminal ~ Arguments* }
Arguments     = { "(" ~ Expression ~ ( "," ~ Expression )* ~ ")" }

Terminal      = { SignedNumber | Identifier | Tuple | Interval | Bytes | Grouping }
Tuple         = { "{" ~ Fields? ~ "}" }
Fields        = { Terminal ~ ( "," ~ Terminal )* }
Grouping      = { "(" ~ Expression ~ ")" }
Identifier    = @{ IDENTIFIER }
SignedNumber  = { ( "-" ~ !ZERO )? ~ Number }
Number        = @{ ( RADIX ~ REAL_BASE_36 ) | REAL }

Bytes         = { "\"" ~ Byte* ~ "\"" }
Byte          = _{ "0" | DecimalByte | BinaryByte | CodePointByte | HexByte }
HexByte       = @{ "16#"? ~ ASCII_HEX_DIGIT{2} }
DecimalByte   = @{ "10#" ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT{0, 2} }
BinaryByte    = @{ "2#" ~ ("0" | "1" ){8} }
CodePointByte = @{ "'" ~ CodePoint ~ "'" }
CodePoint     = { "\\n" | "\\r" | "\\t" | "\\0" | ANY }

// https://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals
Interval      = { OPEN_INTERVAL ~ Endpoints ~ CLOSE_INTERVAL }
Endpoints     = { Arithmetic ~ ( "," | ";" ) ~ Arithmetic }

// Lexical grammar
ZERO         = { "0" | "0.0" | "0." | ".0" }
RADIX        = { ASCII_NONZERO_DIGIT ~ ASCII_DIGIT? ~ "#" }
REAL         = { ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT* )? | "." ~ ASCII_DIGIT+ }
REAL_BASE_36 = { ASCII_ALPHANUMERIC+ ~ ( "." ~ ASCII_ALPHANUMERIC* )? | "." ~ ASCII_ALPHANUMERIC+ }

EPSILON        = { "~" }
MODULO         = { "%" }
SUM            = { "+" | "-" }
PRODUCT        = { "*" | "/" }
POWER          = { "^" }

ANONYMOUS      = _{ "_" }
IDENTIFIER     = _{ XID_START ~ XID_CONTINUE* }
COMPARATOR     = _{ EQUALITY | INEQUALITY }
INEQUALITY     = _{ "<>" | "<=" | ">=" | "<" | ">" }
EQUALITY       = _{ MATCH }
MATCH          = _{ "=" }
OPEN_INTERVAL  = { "(" | "[" | "]" }
CLOSE_INTERVAL = { ")" | "[" | "]" }

WHITESPACE     = _{ PATTERN_WHITE_SPACE }
COMMENT        = _{ ";" ~ (!NEWLINE ~ ANY)* }