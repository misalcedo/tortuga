program    = { SOI ~ expression* ~ EOI }

expression = { modulo | assignment }
assignment = { function ~ "=" ~ block }
block      = { expression | ( "[" ~ expression ~ expression+ ~ "]" ) }

modulo     = { sum ~ ( "%" ~ sum )* }
sum        = { product ~ ( SIGN ~ product )* }
product    = { power ~ ( ( PRODUCT ) ~ power )* }
power      = { primary ~ ( "^" ~ primary )* }

primary    = { number | "(" ~ expression ~ ")" }
call       = { IDENTIFIER ~ ( "(" ~ arguments ~ ")" )? }
number     = { (SIGN? ~ DECIMAL) | RADIX }

arguments  = { expression ~ ( "," ~ expression )* }
parameters = { pattern ~ ( "," ~ pattern )* }

pattern    = { function | range | identity }
function   = { name ~ ( "(" ~ parameters ~ ")" )? }
range      = { ( expression ~ LESSER )? ~ name ~ ( GREATER ~ expression )? }
identity   = { expression | ( name ~ EQUALITY ~ expression ) | ( expression ~ EQUALITY ~ name ) }

name       = { "_" | IDENTIFIER }
IDENTIFIER = _{ LETTER ~ ( ( "_" | LETTER | NUMBER )*  ~ ( LETTER | NUMBER ) )? }
RADIX      = _{ ASCII_DIGIT+ ~ "#" ~ SIGN? ~ BASE36 }
BASE36     = _{ ASCII_ALPHANUMERIC+ ~ ( "." ~ ASCII_ALPHANUMERIC* )? | ( "." ~ ASCII_ALPHANUMERIC+ ) }
DECIMAL    = _{ ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT* )? | ( "." ~ ASCII_DIGIT+ ) }

WHITESPACE = { SPACE_SEPARATOR | NEWLINE }
SIGN       = _{ "+" | "-" }
PRODUCT    = _{ "*" | "/" }
LESSER     = _{ "<" | "<=" }
GREATER    = _{ ">" | ">=" }
EQUALITY   = _{ "=" | "<>" }
COMMENT    = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
