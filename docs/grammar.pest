program    = { SOI ~ expression* ~ EOI }

expression = { assignment | modulo }
assignment = { function ~ "=" ~ block }
block      = { expression | ( "[" ~ expression ~ expression+ ~ "]" ) }

modulo     = { sum ~ ( "%" ~ sum )* }
sum        = { product ~ ( SUM ~ product )* }
product    = { power ~ ( PRODUCT ~ power )* }
power      = { primary ~ ( "^" ~ primary )* }

primary    = { number | call | "(" ~ expression ~ ")" }
call       = { IDENTIFIER ~ ( "(" ~ arguments ~ ")" )? }
number     = { RADIX | (SUM? ~ DECIMAL) }

arguments  = { expression ~ ( "," ~ expression )* }
parameters = { pattern ~ ( "," ~ pattern )* }

pattern    = { range | function | identity }
function   = { NAME ~ ( "(" ~ parameters ~ ")" )? }
range      = { ( expression ~ GREATER )? ~ NAME ~ ( LESSER ~ expression )? }
identity   = { number | ( NAME ~ EQUALITY ~ expression ) | ( expression ~ EQUALITY ~ NAME ) }

NAME       = _{ "_" | IDENTIFIER }

IDENTIFIER = @{ LETTER ~ ( ( "_" | LETTER | NUMBER )*  ~ ( LETTER | NUMBER ) )? }
RADIX      = @{ ASCII_DIGIT+ ~ "#" ~ SUM? ~ BASE36 }
DECIMAL    = @{ ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT* )? | ( "." ~ ASCII_DIGIT+ ) }

BASE36     = _{ ASCII_ALPHANUMERIC+ ~ ( "." ~ ASCII_ALPHANUMERIC* )? | ( "." ~ ASCII_ALPHANUMERIC+ ) }

SUM        = _{ "+" | "-" }
PRODUCT    = _{ "*" | "/" }
LESSER     = _{ "<=" | "<" }
GREATER    = _{ ">=" | ">" }
EQUALITY   = _{ "=" | "<>" }

WHITESPACE = _{ SPACE_SEPARATOR | NEWLINE }
COMMENT    = _{ ";" ~ (!NEWLINE ~ ANY)* }
